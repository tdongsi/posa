<!-- 
Copyright 2006-2012 Will Provost.
All rights reserved by Capstone Courseware, LLC.
-->

<beans
  xmlns="http://www.springframework.org/schema/beans"
  
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
>
	<!-- By default, the bean is singleton. To avoid that, add scrope="prototype".
		Prototype pattern: information cannot be shared.
		Prototype is the exception, not the norm. Singleton usually works. -->
	<!-- By adding factory-method, you enforce the same creational mechanism is
		being used by both Spring and JVM -> restoring Singleton.
		Adding scrope="prototype" will not give back control to Spring. You took control.  -->
	<!-- lazy-init="true" means singletons are not created they are accessed. 
		Example: some bean requires connection, Spring can gives error when network times out.
		Default is eager instantiation. -->
  <bean id="Registry" class="cc.Registry" lazy-init="true" factory-method="getInstance" scrope="prototype">
  </bean>
  
  <!-- You can add a Factory class. And use "factory-bean" attribute to redirect creational mechanism. -->
  
</beans>

